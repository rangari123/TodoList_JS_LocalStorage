🧩 Let’s connect localStorage to your existing app

We’ll store todos under a key like "todos" in localStorage.

✅ Step 1: Add tasks and save them

Every time you add a new task, we’ll save it to localStorage using
localStorage.setItem("todos", JSON.stringify(array))

Example:

function saveTodos() {
  const todos = [];
  document.querySelectorAll("#tasklist li").forEach(li => {
    todos.push({
      text: li.firstChild.textContent,
      completed: li.classList.contains("completed")
    });
  });
  localStorage.setItem("todos", JSON.stringify(todos)); // save all todos
}

✅ Step 2: Load saved tasks when the page loads

We’ll read from localStorage using
JSON.parse(localStorage.getItem("todos"))

function loadTodos() {
  const saved = JSON.parse(localStorage.getItem("todos")) || [];

  saved.forEach(todo => {
    const li = document.createElement("li");
    li.textContent = todo.text;

    const deletebtn = document.createElement("button");
    deletebtn.textContent = todo.completed ? "Completed" : "Delete";
    li.appendChild(deletebtn);

    if (todo.completed) li.classList.add("completed");

    // delete button logic
    deletebtn.addEventListener("click", () => {
      li.remove();
      saveTodos();
    });

    // mark completed
    li.addEventListener("click", () => {
      li.classList.toggle("completed");
      deletebtn.textContent = li.classList.contains("completed")
        ? "Completed"
        : "Delete";
      saveTodos();
    });

    tasklist.appendChild(li);
  });
}

✅ Step 3: Call these functions

Here’s how your main app.js should look now 👇

const todotask = document.getElementById("todotask");
const addbtn = document.getElementById("addbtn");
const tasklist = document.getElementById("tasklist");

addbtn.addEventListener("click", () => {
  const todo = todotask.value.trim();

  if (todo.length === 0) {
    alert("Kindly enter the Todo Task");
    return;
  }

  const li = document.createElement("li");
  li.textContent = todo;

  const deletebtn = document.createElement("button");
  deletebtn.textContent = "Delete";
  li.appendChild(deletebtn);

  deletebtn.addEventListener("click", () => {
    li.remove();
    saveTodos();
  });

  li.addEventListener("click", () => {
    li.classList.toggle("completed");
    deletebtn.textContent = li.classList.contains("completed")
      ? "Completed"
      : "Delete";
    saveTodos();
  });

  tasklist.appendChild(li);
  todotask.value = "";

  saveTodos(); // save updated list
});

function saveTodos() {
  const todos = [];
  document.querySelectorAll("#tasklist li").forEach(li => {
    todos.push({
      text: li.firstChild.textContent,
      completed: li.classList.contains("completed")
    });
  });
  localStorage.setItem("todos", JSON.stringify(todos));
}

function loadTodos() {
  const saved = JSON.parse(localStorage.getItem("todos")) || [];

  saved.forEach(todo => {
    const li = document.createElement("li");
    li.textContent = todo.text;

    const deletebtn = document.createElement("button");
    deletebtn.textContent = todo.completed ? "Completed" : "Delete";
    li.appendChild(deletebtn);

    if (todo.completed) li.classList.add("completed");

    deletebtn.addEventListener("click", () => {
      li.remove();
      saveTodos();
    });

    li.addEventListener("click", () => {
      li.classList.toggle("completed");
      deletebtn.textContent = li.classList.contains("completed")
        ? "Completed"
        : "Delete";
      saveTodos();
    });

    tasklist.appendChild(li);
  });
}

// 🔥 Load saved todos on startup
loadTodos();


/* 
✅ Step 4 (optional): Clear all todos

If you ever want a button to clear all tasks:

<button id="clearAll">Clear All</button>

document.getElementById("clearAll").addEventListener("click", () => {
  localStorage.clear(); // removes all saved todos
  tasklist.innerHTML = ""; // clears from screen too
});

*/

/*

💡 Summary:
Action	localStorage Method	Example
Save	setItem()	localStorage.setItem("todos", JSON.stringify(todos))
Read	getItem()	JSON.parse(localStorage.getItem("todos"))
Remove one key	removeItem()	localStorage.removeItem("todos")
Remove all	clear()	localStorage.clear()
 */

-----------------------

💡 1️⃣ Why are we writing addEventListener() again inside loadTodos()?
👉 Short answer:

Because when you reload the page, the <li> elements are recreated from localStorage, and new event listeners must be attached to them again.

🧠 Explanation:

When you first add a todo:

You create a new <li> and <button> in memory.

Then you attach event listeners to them (like “delete” or “mark completed”).

Then you append them to the DOM.

Now, when you refresh the page:

All those <li> and <button> elements are gone from the DOM.

Local Storage only stores data (text + completed status), not event listeners.

So when you re-create those <li>s from that data (inside loadTodos()), you must reattach the event listeners.

If you don’t, your “Delete” and “Completed” buttons will not respond after refresh.

💡 2️⃣ Why are we calling saveTodos() again and again?

You’ve marked it with a comment — and it’s a great question.

👉 Short answer:

We call saveTodos() every time something changes, so that Local Storage stays in sync with the latest UI.

🧩 Detailed Example:

Let’s say you have 3 actions:

Add a new todo

Mark a todo as completed

Delete a todo

Every one of these actions changes the current list of todos on the screen.

If you don’t update localStorage after each of these actions, then:

You’ll see outdated data on the next refresh.

e.g., You delete a task → refresh → it’s back again (because you didn’t save after deleting).

That’s why we call:

saveTodos() after adding ➕

saveTodos() after deleting 🗑️

saveTodos() after marking completed ✅

It keeps everything consistent.

⚙️ Think of it like this:

Local Storage = Database
Your UI (<ul>) = View

Whenever you change the view (UI), you must update the database (Local Storage) → hence saveTodos().

Whenever you load the app, you must rebuild the view from the database → hence loadTodos().

🧭 Summary:
Concept	Why it’s needed
addEventListener() inside loadTodos()	Because recreated <li>s after refresh need new listeners.
saveTodos() after every change	To keep localStorage data updated with current tasks.










